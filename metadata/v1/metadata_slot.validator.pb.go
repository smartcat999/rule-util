// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metadata/v1/metadata_slot.proto

package v1

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/gogo/googleapis/google/api"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *RestoreRequest) Validate() error {
	if this.Header != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Header); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Header", err)
		}
	}
	return nil
}
func (this *RestoreResponse) Validate() error {
	if this.Header != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Header); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Header", err)
		}
	}
	if oneOfNester, ok := this.GetBody().(*RestoreResponse_InitConfig); ok {
		if oneOfNester.InitConfig != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.InitConfig); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("InitConfig", err)
			}
		}
	}
	if oneOfNester, ok := this.GetBody().(*RestoreResponse_Resource); ok {
		if oneOfNester.Resource != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Resource); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Resource", err)
			}
		}
	}
	if oneOfNester, ok := this.GetBody().(*RestoreResponse_Subscription); ok {
		if oneOfNester.Subscription != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Subscription); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Subscription", err)
			}
		}
	}
	if oneOfNester, ok := this.GetBody().(*RestoreResponse_Rules); ok {
		if oneOfNester.Rules != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Rules); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Rules", err)
			}
		}
	}
	return nil
}
func (this *InitResponse) Validate() error {
	return nil
}
func (this *ResourceResponse) Validate() error {
	for _, item := range this.Source {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Source", err)
			}
		}
	}
	if this.Sink != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Sink); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Sink", err)
		}
	}
	return nil
}
func (this *SubValueResponse) Validate() error {
	for _, item := range this.Subscriptions {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Subscriptions", err)
			}
		}
	}
	return nil
}
func (this *RuleValueResponse) Validate() error {
	for _, item := range this.Rules {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Rules", err)
			}
		}
	}
	return nil
}
func (this *SyncRequest) Validate() error {
	if this.Header != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Header); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Header", err)
		}
	}
	return nil
}
func (this *RuleWatchResponse) Validate() error {
	for _, item := range this.Events {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Events", err)
			}
		}
	}
	return nil
}
func (this *SyncResponse) Validate() error {
	if this.Header != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Header); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Header", err)
		}
	}
	if oneOfNester, ok := this.GetBody().(*SyncResponse_InitConfig); ok {
		if oneOfNester.InitConfig != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.InitConfig); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("InitConfig", err)
			}
		}
	}
	if oneOfNester, ok := this.GetBody().(*SyncResponse_Subscription); ok {
		if oneOfNester.Subscription != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Subscription); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Subscription", err)
			}
		}
	}
	if oneOfNester, ok := this.GetBody().(*SyncResponse_Rules); ok {
		if oneOfNester.Rules != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Rules); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Rules", err)
			}
		}
	}
	return nil
}
func (this *SlotEventResponse) Validate() error {
	return nil
}
func (this *SubEventResponse) Validate() error {
	for _, item := range this.Events {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Events", err)
			}
		}
	}
	return nil
}
func (this *RuleEventResponse) Validate() error {
	for _, item := range this.Events {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Events", err)
			}
		}
	}
	return nil
}
func (this *ReportRequest) Validate() error {
	if this.Header != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Header); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Header", err)
		}
	}
	return nil
}
func (this *ReportResponse) Validate() error {
	if this.Header != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Header); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Header", err)
		}
	}
	return nil
}
