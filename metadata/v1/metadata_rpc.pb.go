// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metadata/v1/metadata_rpc.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OpType int32

const (
	OpType_OP_HANDSHAKE       OpType = 0
	OpType_OP_HANDSHAKE_REPLY OpType = 1
	OpType_OP_HEARTBEAT       OpType = 2
	OpType_OP_HEARTBEAT_REPLY OpType = 3
	OpType_OP_STATUS          OpType = 4
	// OP_STATUS_REPLY = 5;
	OpType_OP_SEND_CMD       OpType = 10
	OpType_OP_SEND_CMD_REPLY OpType = 11
)

var OpType_name = map[int32]string{
	0:  "OP_HANDSHAKE",
	1:  "OP_HANDSHAKE_REPLY",
	2:  "OP_HEARTBEAT",
	3:  "OP_HEARTBEAT_REPLY",
	4:  "OP_STATUS",
	10: "OP_SEND_CMD",
	11: "OP_SEND_CMD_REPLY",
}

var OpType_value = map[string]int32{
	"OP_HANDSHAKE":       0,
	"OP_HANDSHAKE_REPLY": 1,
	"OP_HEARTBEAT":       2,
	"OP_HEARTBEAT_REPLY": 3,
	"OP_STATUS":          4,
	"OP_SEND_CMD":        10,
	"OP_SEND_CMD_REPLY":  11,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}

func (OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f281317e1adfe529, []int{0}
}

type RpcStatus_Status int32

const (
	RpcStatus_OK    RpcStatus_Status = 0
	RpcStatus_Error RpcStatus_Status = 1
)

var RpcStatus_Status_name = map[int32]string{
	0: "OK",
	1: "Error",
}

var RpcStatus_Status_value = map[string]int32{
	"OK":    0,
	"Error": 1,
}

func (x RpcStatus_Status) String() string {
	return proto.EnumName(RpcStatus_Status_name, int32(x))
}

func (RpcStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f281317e1adfe529, []int{2, 0}
}

// rpc RPC (stream CMDRequest) returns (stream CMDResponse);
type RpcPacket struct {
	Header               *RequestHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Cluster              *ClusterInfo   `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Ver                  string         `protobuf:"bytes,4,opt,name=ver,proto3" json:"ver,omitempty"`
	ResourceId           string         `protobuf:"bytes,10,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Op                   OpType         `protobuf:"varint,11,opt,name=op,proto3,enum=mdmp.metadata.OpType" json:"op,omitempty"`
	Payload              []byte         `protobuf:"bytes,12,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RpcPacket) Reset()         { *m = RpcPacket{} }
func (m *RpcPacket) String() string { return proto.CompactTextString(m) }
func (*RpcPacket) ProtoMessage()    {}
func (*RpcPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_f281317e1adfe529, []int{0}
}
func (m *RpcPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcPacket.Unmarshal(m, b)
}
func (m *RpcPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcPacket.Marshal(b, m, deterministic)
}
func (m *RpcPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcPacket.Merge(m, src)
}
func (m *RpcPacket) XXX_Size() int {
	return xxx_messageInfo_RpcPacket.Size(m)
}
func (m *RpcPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcPacket.DiscardUnknown(m)
}

var xxx_messageInfo_RpcPacket proto.InternalMessageInfo

type ClusterInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterInfo) Reset()         { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()    {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f281317e1adfe529, []int{1}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterInfo.Unmarshal(m, b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return xxx_messageInfo_ClusterInfo.Size(m)
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

type RpcStatus struct {
	Status               RpcStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=mdmp.metadata.RpcStatus_Status" json:"status,omitempty"`
	Message              string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RpcStatus) Reset()         { *m = RpcStatus{} }
func (m *RpcStatus) String() string { return proto.CompactTextString(m) }
func (*RpcStatus) ProtoMessage()    {}
func (*RpcStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f281317e1adfe529, []int{2}
}
func (m *RpcStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcStatus.Unmarshal(m, b)
}
func (m *RpcStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcStatus.Marshal(b, m, deterministic)
}
func (m *RpcStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcStatus.Merge(m, src)
}
func (m *RpcStatus) XXX_Size() int {
	return xxx_messageInfo_RpcStatus.Size(m)
}
func (m *RpcStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RpcStatus proto.InternalMessageInfo

type QueryAction struct {
	Entity               *Entity  `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryAction) Reset()         { *m = QueryAction{} }
func (m *QueryAction) String() string { return proto.CompactTextString(m) }
func (*QueryAction) ProtoMessage()    {}
func (*QueryAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f281317e1adfe529, []int{3}
}
func (m *QueryAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryAction.Unmarshal(m, b)
}
func (m *QueryAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryAction.Marshal(b, m, deterministic)
}
func (m *QueryAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAction.Merge(m, src)
}
func (m *QueryAction) XXX_Size() int {
	return xxx_messageInfo_QueryAction.Size(m)
}
func (m *QueryAction) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAction.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAction proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("mdmp.metadata.OpType", OpType_name, OpType_value)
	proto.RegisterEnum("mdmp.metadata.RpcStatus_Status", RpcStatus_Status_name, RpcStatus_Status_value)
	proto.RegisterType((*RpcPacket)(nil), "mdmp.metadata.RpcPacket")
	proto.RegisterType((*ClusterInfo)(nil), "mdmp.metadata.ClusterInfo")
	proto.RegisterType((*RpcStatus)(nil), "mdmp.metadata.RpcStatus")
	proto.RegisterType((*QueryAction)(nil), "mdmp.metadata.QueryAction")
}

func init() { proto.RegisterFile("metadata/v1/metadata_rpc.proto", fileDescriptor_f281317e1adfe529) }

var fileDescriptor_f281317e1adfe529 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x41, 0x6b, 0xdb, 0x4c,
	0x10, 0xf5, 0x2a, 0xfe, 0x64, 0x3c, 0x72, 0xf2, 0xa9, 0x5b, 0x12, 0x84, 0x5b, 0x1c, 0x63, 0x28,
	0x98, 0x42, 0xa4, 0xc6, 0x0d, 0x84, 0x42, 0x2f, 0x8a, 0x2d, 0x70, 0x48, 0x1a, 0xbb, 0x6b, 0xf7,
	0xd0, 0x5e, 0xc4, 0x5a, 0xda, 0x28, 0xa2, 0x96, 0x56, 0x95, 0x56, 0x06, 0xd3, 0x9f, 0xd1, 0x3f,
	0xd1, 0x9f, 0xd2, 0xbf, 0x91, 0x5e, 0x7b, 0xe9, 0xb1, 0xc7, 0xe2, 0x95, 0x04, 0xae, 0xd3, 0x9e,
	0xf4, 0xde, 0xcc, 0x7b, 0x33, 0xc3, 0xd3, 0x42, 0x27, 0x62, 0x82, 0xfa, 0x54, 0x50, 0x6b, 0x75,
	0x6a, 0x55, 0xd8, 0x4d, 0x13, 0xcf, 0x4c, 0x52, 0x2e, 0x38, 0xde, 0x8f, 0xfc, 0x28, 0x31, 0xab,
	0x46, 0xfb, 0x24, 0x08, 0xc5, 0x5d, 0xbe, 0x30, 0x3d, 0x1e, 0x59, 0x01, 0x0f, 0xb8, 0x25, 0x55,
	0x8b, 0xfc, 0x56, 0x32, 0x49, 0x24, 0x2a, 0xdc, 0xed, 0xee, 0x5f, 0xa7, 0x47, 0xdc, 0x67, 0xcb,
	0x52, 0x71, 0xbe, 0x3b, 0x30, 0xe0, 0x3c, 0x58, 0x32, 0x9a, 0x84, 0x59, 0x09, 0x2d, 0x9a, 0x84,
	0x16, 0x8d, 0x63, 0x2e, 0xa8, 0x08, 0x79, 0x9c, 0x15, 0xc6, 0xde, 0x0f, 0x04, 0x4d, 0x92, 0x78,
	0x53, 0xea, 0x7d, 0x64, 0x02, 0x9f, 0x81, 0x7a, 0xc7, 0xa8, 0xcf, 0x52, 0x43, 0xe9, 0xa2, 0xbe,
	0x36, 0x78, 0x6a, 0xfe, 0x71, 0xb7, 0x49, 0xd8, 0xa7, 0x9c, 0x65, 0x62, 0x2c, 0x35, 0xa4, 0xd4,
	0xe2, 0x33, 0x68, 0x78, 0xcb, 0x3c, 0x13, 0x2c, 0x35, 0xf6, 0xa4, 0xad, 0xbd, 0x63, 0x1b, 0x16,
	0xdd, 0xcb, 0xf8, 0x96, 0x93, 0x4a, 0x8a, 0x75, 0xd8, 0x5b, 0xb1, 0xd4, 0xa8, 0x77, 0x51, 0xbf,
	0x49, 0x36, 0x10, 0x1f, 0x83, 0x96, 0xb2, 0x8c, 0xe7, 0xa9, 0xc7, 0xdc, 0xd0, 0x37, 0x40, 0x76,
	0xa0, 0x2a, 0x5d, 0xfa, 0xf8, 0x19, 0x28, 0x3c, 0x31, 0xb4, 0x2e, 0xea, 0x1f, 0x0c, 0x0e, 0x77,
	0x76, 0x4c, 0x92, 0xf9, 0x3a, 0x61, 0x44, 0xe1, 0x09, 0x36, 0xa0, 0x91, 0xd0, 0xf5, 0x92, 0x53,
	0xdf, 0x68, 0x75, 0x51, 0xbf, 0x45, 0x2a, 0xda, 0x7b, 0x05, 0xda, 0xd6, 0x2d, 0x18, 0x43, 0x3d,
	0xa6, 0x11, 0x33, 0x90, 0xdc, 0x24, 0x31, 0x3e, 0x02, 0xb5, 0xd8, 0x27, 0x23, 0x68, 0x92, 0x92,
	0xf5, 0x3e, 0xcb, 0x9c, 0x66, 0x82, 0x8a, 0x3c, 0xc3, 0xe7, 0xa0, 0x66, 0x12, 0x49, 0xeb, 0xc1,
	0xe0, 0x78, 0x37, 0xa7, 0x4a, 0x69, 0x16, 0x1f, 0x52, 0xca, 0x37, 0xa7, 0x45, 0x2c, 0xcb, 0x68,
	0x50, 0x8d, 0xaf, 0x68, 0xef, 0x09, 0xa8, 0xe5, 0x70, 0x15, 0x94, 0xc9, 0x95, 0x5e, 0xc3, 0x4d,
	0xf8, 0xcf, 0x49, 0x53, 0x9e, 0xea, 0xa8, 0xf7, 0x1a, 0xb4, 0xb7, 0x39, 0x4b, 0xd7, 0xb6, 0xb7,
	0xf9, 0x77, 0xf8, 0x04, 0x54, 0x16, 0x8b, 0x50, 0xac, 0xe5, 0x7a, 0xed, 0x41, 0x16, 0x8e, 0x6c,
	0x92, 0x52, 0xf4, 0xfc, 0x0b, 0x02, 0xb5, 0x88, 0x07, 0xeb, 0xd0, 0x9a, 0x4c, 0xdd, 0xb1, 0x7d,
	0x33, 0x9a, 0x8d, 0xed, 0x2b, 0x47, 0xaf, 0xe1, 0x23, 0xc0, 0xdb, 0x15, 0x97, 0x38, 0xd3, 0xeb,
	0xf7, 0x3a, 0xaa, 0x94, 0x8e, 0x4d, 0xe6, 0x17, 0x8e, 0x3d, 0xd7, 0x95, 0x4a, 0x59, 0x55, 0x4a,
	0xe5, 0x1e, 0xde, 0x87, 0xe6, 0x64, 0xea, 0xce, 0xe6, 0xf6, 0xfc, 0xdd, 0x4c, 0xaf, 0xe3, 0xff,
	0x41, 0xdb, 0x50, 0xe7, 0x66, 0xe4, 0x0e, 0xdf, 0x8c, 0x74, 0xc0, 0x87, 0xf0, 0x68, 0xab, 0x50,
	0xda, 0xb4, 0xc1, 0x35, 0x34, 0xca, 0x7f, 0x81, 0x6d, 0x68, 0x0c, 0x79, 0x14, 0xd1, 0xd8, 0xc7,
	0xc6, 0xc3, 0x24, 0x8b, 0xb7, 0xd9, 0xfe, 0x67, 0xa7, 0x8f, 0x5e, 0xa0, 0x8b, 0xc7, 0xdf, 0xee,
	0x3b, 0xb5, 0x9f, 0xf7, 0x9d, 0xda, 0xd7, 0xef, 0x9d, 0xda, 0x07, 0x65, 0x75, 0xfa, 0x0b, 0xa1,
	0x85, 0x2a, 0xdf, 0xf8, 0xcb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xd1, 0x3f, 0xca, 0x9e,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	// Inversion-of-control Service
	Command(ctx context.Context, opts ...grpc.CallOption) (Cluster_CommandClient, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Command(ctx context.Context, opts ...grpc.CallOption) (Cluster_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cluster_serviceDesc.Streams[0], "/mdmp.metadata.Cluster/Command", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterCommandClient{stream}
	return x, nil
}

type Cluster_CommandClient interface {
	Send(*RpcPacket) error
	Recv() (*RpcPacket, error)
	grpc.ClientStream
}

type clusterCommandClient struct {
	grpc.ClientStream
}

func (x *clusterCommandClient) Send(m *RpcPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterCommandClient) Recv() (*RpcPacket, error) {
	m := new(RpcPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	// Inversion-of-control Service
	Command(Cluster_CommandServer) error
}

// UnimplementedClusterServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (*UnimplementedClusterServer) Command(srv Cluster_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterServer).Command(&clusterCommandServer{stream})
}

type Cluster_CommandServer interface {
	Send(*RpcPacket) error
	Recv() (*RpcPacket, error)
	grpc.ServerStream
}

type clusterCommandServer struct {
	grpc.ServerStream
}

func (x *clusterCommandServer) Send(m *RpcPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterCommandServer) Recv() (*RpcPacket, error) {
	m := new(RpcPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mdmp.metadata.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Command",
			Handler:       _Cluster_Command_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "metadata/v1/metadata_rpc.proto",
}
