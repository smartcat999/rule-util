// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metadata/v1/metadata_rule.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RuleRequest_Status int32

const (
	RuleRequest_Enable  RuleRequest_Status = 0
	RuleRequest_Disable RuleRequest_Status = -1
)

var RuleRequest_Status_name = map[int32]string{
	0:  "Enable",
	-1: "Disable",
}

var RuleRequest_Status_value = map[string]int32{
	"Enable":  0,
	"Disable": -1,
}

func (x RuleRequest_Status) String() string {
	return proto.EnumName(RuleRequest_Status_name, int32(x))
}

func (RuleRequest_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c820a7bb6dab893b, []int{0, 0}
}

type RuleResponse_Status int32

const (
	RuleResponse_Enable  RuleResponse_Status = 0
	RuleResponse_Disable RuleResponse_Status = -1
)

var RuleResponse_Status_name = map[int32]string{
	0:  "Enable",
	-1: "Disable",
}

var RuleResponse_Status_value = map[string]int32{
	"Enable":  0,
	"Disable": -1,
}

func (x RuleResponse_Status) String() string {
	return proto.EnumName(RuleResponse_Status_name, int32(x))
}

func (RuleResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c820a7bb6dab893b, []int{1, 0}
}

type RouteTableRequest_Status int32

const (
	RouteTableRequest_Enable  RouteTableRequest_Status = 0
	RouteTableRequest_Disable RouteTableRequest_Status = -1
)

var RouteTableRequest_Status_name = map[int32]string{
	0:  "Enable",
	-1: "Disable",
}

var RouteTableRequest_Status_value = map[string]int32{
	"Enable":  0,
	"Disable": -1,
}

func (x RouteTableRequest_Status) String() string {
	return proto.EnumName(RouteTableRequest_Status_name, int32(x))
}

func (RouteTableRequest_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c820a7bb6dab893b, []int{2, 0}
}

type RouteTableResponse_Status int32

const (
	RouteTableResponse_Enable  RouteTableResponse_Status = 0
	RouteTableResponse_Disable RouteTableResponse_Status = -1
)

var RouteTableResponse_Status_name = map[int32]string{
	0:  "Enable",
	-1: "Disable",
}

var RouteTableResponse_Status_value = map[string]int32{
	"Enable":  0,
	"Disable": -1,
}

func (x RouteTableResponse_Status) String() string {
	return proto.EnumName(RouteTableResponse_Status_name, int32(x))
}

func (RouteTableResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c820a7bb6dab893b, []int{3, 0}
}

type RuleRequest struct {
	Header               *RequestHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	PacketId             int64          `protobuf:"varint,10,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
	Rule                 *RuleQL        `protobuf:"bytes,11,opt,name=rule,proto3" json:"rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RuleRequest) Reset()         { *m = RuleRequest{} }
func (m *RuleRequest) String() string { return proto.CompactTextString(m) }
func (*RuleRequest) ProtoMessage()    {}
func (*RuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c820a7bb6dab893b, []int{0}
}
func (m *RuleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleRequest.Unmarshal(m, b)
}
func (m *RuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleRequest.Marshal(b, m, deterministic)
}
func (m *RuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleRequest.Merge(m, src)
}
func (m *RuleRequest) XXX_Size() int {
	return xxx_messageInfo_RuleRequest.Size(m)
}
func (m *RuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RuleRequest proto.InternalMessageInfo

func (m *RuleRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RuleRequest) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *RuleRequest) GetRule() *RuleQL {
	if m != nil {
		return m.Rule
	}
	return nil
}

type RuleResponse struct {
	Header               *ResponseHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	PacketId             int64           `protobuf:"varint,10,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
	RuleQl               *RuleQL         `protobuf:"bytes,11,opt,name=rule_ql,json=ruleQl,proto3" json:"rule_ql,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RuleResponse) Reset()         { *m = RuleResponse{} }
func (m *RuleResponse) String() string { return proto.CompactTextString(m) }
func (*RuleResponse) ProtoMessage()    {}
func (*RuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c820a7bb6dab893b, []int{1}
}
func (m *RuleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleResponse.Unmarshal(m, b)
}
func (m *RuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleResponse.Marshal(b, m, deterministic)
}
func (m *RuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleResponse.Merge(m, src)
}
func (m *RuleResponse) XXX_Size() int {
	return xxx_messageInfo_RuleResponse.Size(m)
}
func (m *RuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RuleResponse proto.InternalMessageInfo

func (m *RuleResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RuleResponse) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *RuleResponse) GetRuleQl() *RuleQL {
	if m != nil {
		return m.RuleQl
	}
	return nil
}

type RouteTableRequest struct {
	Header               *RequestHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	PacketId             int64          `protobuf:"varint,10,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
	Rule                 *RuleQL        `protobuf:"bytes,11,opt,name=rule,proto3" json:"rule,omitempty"`
	DstTopic             string         `protobuf:"bytes,12,opt,name=dst_topic,json=dstTopic,proto3" json:"dst_topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RouteTableRequest) Reset()         { *m = RouteTableRequest{} }
func (m *RouteTableRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableRequest) ProtoMessage()    {}
func (*RouteTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c820a7bb6dab893b, []int{2}
}
func (m *RouteTableRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableRequest.Unmarshal(m, b)
}
func (m *RouteTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableRequest.Marshal(b, m, deterministic)
}
func (m *RouteTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableRequest.Merge(m, src)
}
func (m *RouteTableRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableRequest.Size(m)
}
func (m *RouteTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableRequest proto.InternalMessageInfo

func (m *RouteTableRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RouteTableRequest) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *RouteTableRequest) GetRule() *RuleQL {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *RouteTableRequest) GetDstTopic() string {
	if m != nil {
		return m.DstTopic
	}
	return ""
}

type RouteTableResponse struct {
	Header               *ResponseHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	PacketId             int64           `protobuf:"varint,10,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
	RuleQl               *RuleQL         `protobuf:"bytes,11,opt,name=rule_ql,json=ruleQl,proto3" json:"rule_ql,omitempty"`
	DstTopic             string          `protobuf:"bytes,12,opt,name=dst_topic,json=dstTopic,proto3" json:"dst_topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RouteTableResponse) Reset()         { *m = RouteTableResponse{} }
func (m *RouteTableResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableResponse) ProtoMessage()    {}
func (*RouteTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c820a7bb6dab893b, []int{3}
}
func (m *RouteTableResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableResponse.Unmarshal(m, b)
}
func (m *RouteTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableResponse.Marshal(b, m, deterministic)
}
func (m *RouteTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableResponse.Merge(m, src)
}
func (m *RouteTableResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableResponse.Size(m)
}
func (m *RouteTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableResponse proto.InternalMessageInfo

func (m *RouteTableResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RouteTableResponse) GetPacketId() int64 {
	if m != nil {
		return m.PacketId
	}
	return 0
}

func (m *RouteTableResponse) GetRuleQl() *RuleQL {
	if m != nil {
		return m.RuleQl
	}
	return nil
}

func (m *RouteTableResponse) GetDstTopic() string {
	if m != nil {
		return m.DstTopic
	}
	return ""
}

func init() {
	proto.RegisterEnum("mdmp.metadata.RuleRequest_Status", RuleRequest_Status_name, RuleRequest_Status_value)
	proto.RegisterEnum("mdmp.metadata.RuleResponse_Status", RuleResponse_Status_name, RuleResponse_Status_value)
	proto.RegisterEnum("mdmp.metadata.RouteTableRequest_Status", RouteTableRequest_Status_name, RouteTableRequest_Status_value)
	proto.RegisterEnum("mdmp.metadata.RouteTableResponse_Status", RouteTableResponse_Status_name, RouteTableResponse_Status_value)
	proto.RegisterType((*RuleRequest)(nil), "mdmp.metadata.RuleRequest")
	proto.RegisterType((*RuleResponse)(nil), "mdmp.metadata.RuleResponse")
	proto.RegisterType((*RouteTableRequest)(nil), "mdmp.metadata.RouteTableRequest")
	proto.RegisterType((*RouteTableResponse)(nil), "mdmp.metadata.RouteTableResponse")
}

func init() { proto.RegisterFile("metadata/v1/metadata_rule.proto", fileDescriptor_c820a7bb6dab893b) }

var fileDescriptor_c820a7bb6dab893b = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4f, 0x8b, 0xda, 0x40,
	0x18, 0x87, 0x3b, 0x56, 0x12, 0x7d, 0x55, 0x68, 0x87, 0x16, 0x42, 0x6c, 0x69, 0xea, 0xc9, 0x16,
	0x9a, 0xa0, 0x6d, 0x3f, 0x80, 0x62, 0xa1, 0x85, 0x5e, 0x4c, 0x3d, 0xf5, 0x12, 0x92, 0xcc, 0xac,
	0x86, 0x9d, 0x38, 0xd1, 0xcc, 0xf8, 0xd5, 0xf6, 0xb6, 0xec, 0xe7, 0xd8, 0xdb, 0x7e, 0x92, 0x5d,
	0x66, 0x12, 0xf7, 0x4f, 0x56, 0x04, 0x59, 0x0f, 0xe6, 0x34, 0xef, 0xcc, 0x93, 0x1f, 0xcf, 0x3b,
	0x6f, 0x08, 0x7c, 0x4a, 0xa9, 0x08, 0x49, 0x28, 0x42, 0x6f, 0x33, 0xf0, 0xb6, 0xeb, 0x60, 0x2d,
	0x19, 0x75, 0xb3, 0x35, 0x17, 0x1c, 0x77, 0x52, 0x92, 0x66, 0xee, 0xf6, 0xc4, 0xfe, 0x36, 0x4f,
	0xc4, 0x42, 0x46, 0x6e, 0xcc, 0x53, 0x6f, 0xce, 0xe7, 0xdc, 0xd3, 0x54, 0x24, 0xcf, 0x74, 0xa5,
	0x0b, 0xbd, 0x2a, 0xde, 0xb6, 0x9d, 0x9d, 0xf1, 0x29, 0x27, 0x94, 0x15, 0x44, 0xef, 0x02, 0x41,
	0xcb, 0x97, 0x8c, 0xfa, 0x74, 0x25, 0x69, 0x2e, 0xf0, 0x0f, 0x30, 0x16, 0x34, 0x24, 0x74, 0x6d,
	0xd5, 0x1c, 0xd4, 0x6f, 0x0d, 0x3f, 0xb8, 0x4f, 0x04, 0xdc, 0x92, 0xfb, 0xad, 0x19, 0xbf, 0x64,
	0x71, 0x17, 0x9a, 0x59, 0x18, 0x9f, 0x53, 0x11, 0x24, 0xc4, 0x02, 0x07, 0xf5, 0x5f, 0xfb, 0x8d,
	0x62, 0xe3, 0x0f, 0xc1, 0x5f, 0xa0, 0xae, 0x1a, 0xb2, 0x5a, 0x3a, 0xf0, 0x7d, 0x35, 0x50, 0x32,
	0x3a, 0xfd, 0xeb, 0x6b, 0xa4, 0xf7, 0x15, 0x8c, 0x7f, 0x22, 0x14, 0x32, 0xc7, 0x00, 0xc6, 0xaf,
	0x65, 0x18, 0x31, 0xfa, 0xe6, 0x15, 0x7e, 0x07, 0xe6, 0x24, 0xc9, 0x75, 0x71, 0xbb, 0x7d, 0x50,
	0xef, 0x12, 0x41, 0xbb, 0x30, 0xcf, 0x33, 0xbe, 0xcc, 0x29, 0xfe, 0x59, 0x51, 0xff, 0xf8, 0x4c,
	0xbd, 0x00, 0x0f, 0x71, 0x77, 0xc1, 0x54, 0x62, 0xc1, 0x8a, 0xed, 0xd7, 0x37, 0x14, 0x35, 0x65,
	0x07, 0x35, 0x70, 0x8d, 0xe0, 0xad, 0xcf, 0xa5, 0xa0, 0x33, 0x75, 0x72, 0x12, 0x03, 0x50, 0x39,
	0x24, 0x17, 0x81, 0xe0, 0x59, 0x12, 0x5b, 0x6d, 0x07, 0xf5, 0x9b, 0x7e, 0x83, 0xe4, 0x62, 0xa6,
	0xea, 0x83, 0x9a, 0xbb, 0x41, 0x80, 0x1f, 0x37, 0x77, 0x3a, 0x33, 0x3a, 0x5a, 0x8f, 0xc3, 0xab,
	0x1a, 0x80, 0xca, 0x1e, 0xc5, 0x22, 0xe1, 0x4b, 0x3c, 0x06, 0x73, 0x44, 0x88, 0xda, 0xc0, 0xf6,
	0x0e, 0x83, 0x72, 0x70, 0x76, 0x77, 0xe7, 0x59, 0x79, 0x3f, 0x63, 0x30, 0x27, 0x94, 0xbd, 0x2c,
	0x63, 0x06, 0x1d, 0xe5, 0x71, 0x7f, 0xf9, 0xd8, 0xa9, 0xd2, 0xd5, 0x8f, 0xce, 0xfe, 0xbc, 0x87,
	0x78, 0x48, 0x55, 0x66, 0xc7, 0x4d, 0x1d, 0xd7, 0xff, 0xd7, 0x36, 0x83, 0xc8, 0xd0, 0xff, 0xa2,
	0xef, 0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0xf3, 0x21, 0xe3, 0x0e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RuleActionClient is the client API for RuleAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuleActionClient interface {
	// Rule
	AddRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	DelRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error)
	// Routing Table
	AddRouteTable(ctx context.Context, in *RouteTableRequest, opts ...grpc.CallOption) (*RouteTableResponse, error)
	DelRouteTable(ctx context.Context, in *RouteTableRequest, opts ...grpc.CallOption) (*RouteTableResponse, error)
}

type ruleActionClient struct {
	cc *grpc.ClientConn
}

func NewRuleActionClient(cc *grpc.ClientConn) RuleActionClient {
	return &ruleActionClient{cc}
}

func (c *ruleActionClient) AddRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/mdmp.metadata.RuleAction/AddRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleActionClient) DelRule(ctx context.Context, in *RuleRequest, opts ...grpc.CallOption) (*RuleResponse, error) {
	out := new(RuleResponse)
	err := c.cc.Invoke(ctx, "/mdmp.metadata.RuleAction/DelRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleActionClient) AddRouteTable(ctx context.Context, in *RouteTableRequest, opts ...grpc.CallOption) (*RouteTableResponse, error) {
	out := new(RouteTableResponse)
	err := c.cc.Invoke(ctx, "/mdmp.metadata.RuleAction/AddRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleActionClient) DelRouteTable(ctx context.Context, in *RouteTableRequest, opts ...grpc.CallOption) (*RouteTableResponse, error) {
	out := new(RouteTableResponse)
	err := c.cc.Invoke(ctx, "/mdmp.metadata.RuleAction/DelRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleActionServer is the server API for RuleAction service.
type RuleActionServer interface {
	// Rule
	AddRule(context.Context, *RuleRequest) (*RuleResponse, error)
	DelRule(context.Context, *RuleRequest) (*RuleResponse, error)
	// Routing Table
	AddRouteTable(context.Context, *RouteTableRequest) (*RouteTableResponse, error)
	DelRouteTable(context.Context, *RouteTableRequest) (*RouteTableResponse, error)
}

// UnimplementedRuleActionServer can be embedded to have forward compatible implementations.
type UnimplementedRuleActionServer struct {
}

func (*UnimplementedRuleActionServer) AddRule(ctx context.Context, req *RuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRule not implemented")
}
func (*UnimplementedRuleActionServer) DelRule(ctx context.Context, req *RuleRequest) (*RuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRule not implemented")
}
func (*UnimplementedRuleActionServer) AddRouteTable(ctx context.Context, req *RouteTableRequest) (*RouteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRouteTable not implemented")
}
func (*UnimplementedRuleActionServer) DelRouteTable(ctx context.Context, req *RouteTableRequest) (*RouteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRouteTable not implemented")
}

func RegisterRuleActionServer(s *grpc.Server, srv RuleActionServer) {
	s.RegisterService(&_RuleAction_serviceDesc, srv)
}

func _RuleAction_AddRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleActionServer).AddRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mdmp.metadata.RuleAction/AddRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleActionServer).AddRule(ctx, req.(*RuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAction_DelRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleActionServer).DelRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mdmp.metadata.RuleAction/DelRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleActionServer).DelRule(ctx, req.(*RuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAction_AddRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleActionServer).AddRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mdmp.metadata.RuleAction/AddRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleActionServer).AddRouteTable(ctx, req.(*RouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleAction_DelRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleActionServer).DelRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mdmp.metadata.RuleAction/DelRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleActionServer).DelRouteTable(ctx, req.(*RouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleAction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mdmp.metadata.RuleAction",
	HandlerType: (*RuleActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRule",
			Handler:    _RuleAction_AddRule_Handler,
		},
		{
			MethodName: "DelRule",
			Handler:    _RuleAction_DelRule_Handler,
		},
		{
			MethodName: "AddRouteTable",
			Handler:    _RuleAction_AddRouteTable_Handler,
		},
		{
			MethodName: "DelRouteTable",
			Handler:    _RuleAction_DelRouteTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata/v1/metadata_rule.proto",
}
